gokvlite is a simple key/value store written in go that implements a single file key 
value/store for use as a library. It is meant to be embedded into another project rather
than as a standalone database server. Its inspiration was primarily sqlite (with a near memcache api)

Installation:
> go get github.com/finder/gokvlite

Sample usage:

package main

import (
	"github.com/finder/gokvlite"
)

func main() {
	//Opens the file, doesn't matter if it exists or not.
	kh, err := gokvlite.Open("/tmp/kvlite.csv")
	if err != nil {
		panic(fmt.Sprintf("Error:", err))
	}

	//Closes the file
	defer kh.Close()

	//Sets a key and checks for errors
	if err = kh.Set("Testing", []byte("This is the data")); err != nil {
		panic(fmt.Sprintf("Error:", err))
	}

	//Gets the key and checks for errors
	data, err := kh.Get("Testing")
	if err != nil {
		panic(fmt.Sprintf("Error:", err))
	}

	//Print out the data
	fmt.Println(string(*data))
}
